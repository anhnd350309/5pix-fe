/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * 5PIX BACKEND PROD
 * 
        Base frame with FastAPI micro framework + Postgresql
            - Login/Register with JWT
            - Permission
            - CRUD User
            - Unit testing with Pytest
            - Dockerize
        
 * OpenAPI spec version: 0.1.0
 */
import { useQuery } from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'
import type { ResponseSchemaBase } from '../../schemas'
import { defaultMutator } from '../../api/axiosInstance'

/**
 * @summary Get
 */
export const getHealthcheckGet = (signal?: AbortSignal) => {
  return defaultMutator<ResponseSchemaBase>({
    url: `https://dapi.5pix.org/healthcheck`,
    method: 'GET',
    signal,
  })
}

export const getGetHealthcheckGetQueryKey = () => {
  return [`https://api.5pix.org/healthcheck`] as const
}

export const getGetHealthcheckGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getHealthcheckGet>>,
  TError = unknown,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getHealthcheckGet>>, TError, TData>>
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetHealthcheckGetQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getHealthcheckGet>>> = ({ signal }) =>
    getHealthcheckGet(signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getHealthcheckGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData> }
}

export type GetHealthcheckGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getHealthcheckGet>>
>
export type GetHealthcheckGetQueryError = unknown

export function useGetHealthcheckGet<
  TData = Awaited<ReturnType<typeof getHealthcheckGet>>,
  TError = unknown,
>(options: {
  query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getHealthcheckGet>>, TError, TData>> &
    Pick<
      DefinedInitialDataOptions<Awaited<ReturnType<typeof getHealthcheckGet>>, TError, TData>,
      'initialData'
    >
}): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHealthcheckGet<
  TData = Awaited<ReturnType<typeof getHealthcheckGet>>,
  TError = unknown,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getHealthcheckGet>>, TError, TData>> &
    Pick<
      UndefinedInitialDataOptions<Awaited<ReturnType<typeof getHealthcheckGet>>, TError, TData>,
      'initialData'
    >
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetHealthcheckGet<
  TData = Awaited<ReturnType<typeof getHealthcheckGet>>,
  TError = unknown,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getHealthcheckGet>>, TError, TData>>
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get
 */

export function useGetHealthcheckGet<
  TData = Awaited<ReturnType<typeof getHealthcheckGet>>,
  TError = unknown,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getHealthcheckGet>>, TError, TData>>
}): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {
  const queryOptions = getGetHealthcheckGetQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData>
  }

  query.queryKey = queryOptions.queryKey

  return query
}
