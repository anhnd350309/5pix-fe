/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * 5PIX BACKEND
 * 
        Base frame with FastAPI micro framework + Postgresql
            - Login/Register with JWT
            - Permission
            - CRUD User
            - Unit testing with Pytest
            - Dockerize
        
 * OpenAPI spec version: 0.1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  BodySearchPubImagesPost,
  DataResponseAlbumImageItemResponsePublic,
  HTTPValidationError,
  PageAlbumImageItemResponsePublic,
  SearchPubImagesPostParams
} from '../../schemas'
import { defaultMutator } from '../../api/axiosInstance';



/**
 * API Search Album Image
 * @summary Search
 */
export const searchPubImagesPost = (
    bodySearchPubImagesPost: BodySearchPubImagesPost,
    params?: SearchPubImagesPostParams,
 signal?: AbortSignal
) => {
      
      const formData = new FormData();
if(bodySearchPubImagesPost.avatar_file !== undefined) {
 formData.append('avatar_file', bodySearchPubImagesPost.avatar_file)
 }

      return defaultMutator<PageAlbumImageItemResponsePublic>(
      {url: `/pub/images`, method: 'POST',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData,
        params, signal
    },
      );
    }
  


export const getSearchPubImagesPostMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof searchPubImagesPost>>, TError,{data: BodySearchPubImagesPost;params?: SearchPubImagesPostParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof searchPubImagesPost>>, TError,{data: BodySearchPubImagesPost;params?: SearchPubImagesPostParams}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof searchPubImagesPost>>, {data: BodySearchPubImagesPost;params?: SearchPubImagesPostParams}> = (props) => {
          const {data,params} = props ?? {};

          return  searchPubImagesPost(data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SearchPubImagesPostMutationResult = NonNullable<Awaited<ReturnType<typeof searchPubImagesPost>>>
    export type SearchPubImagesPostMutationBody = BodySearchPubImagesPost
    export type SearchPubImagesPostMutationError = HTTPValidationError

    /**
 * @summary Search
 */
export const useSearchPubImagesPost = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof searchPubImagesPost>>, TError,{data: BodySearchPubImagesPost;params?: SearchPubImagesPostParams}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof searchPubImagesPost>>,
        TError,
        {data: BodySearchPubImagesPost;params?: SearchPubImagesPostParams},
        TContext
      > => {

      const mutationOptions = getSearchPubImagesPostMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * ### API get detail Image by id

- Nếu image chưa có cdn_image_url --> chưa thể public --> không cho phép get
 * @summary Detail Image
 */
export const detailImagePubImagesImageIdGet = (
    imageId: number,
 signal?: AbortSignal
) => {
      
      
      return defaultMutator<DataResponseAlbumImageItemResponsePublic>(
      {url: `/pub/images/${imageId}`, method: 'GET', signal
    },
      );
    }
  

export const getDetailImagePubImagesImageIdGetQueryKey = (imageId: number,) => {
    return [`/pub/images/${imageId}`] as const;
    }

    
export const getDetailImagePubImagesImageIdGetQueryOptions = <TData = Awaited<ReturnType<typeof detailImagePubImagesImageIdGet>>, TError = HTTPValidationError>(imageId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof detailImagePubImagesImageIdGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDetailImagePubImagesImageIdGetQueryKey(imageId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof detailImagePubImagesImageIdGet>>> = ({ signal }) => detailImagePubImagesImageIdGet(imageId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(imageId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof detailImagePubImagesImageIdGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type DetailImagePubImagesImageIdGetQueryResult = NonNullable<Awaited<ReturnType<typeof detailImagePubImagesImageIdGet>>>
export type DetailImagePubImagesImageIdGetQueryError = HTTPValidationError


export function useDetailImagePubImagesImageIdGet<TData = Awaited<ReturnType<typeof detailImagePubImagesImageIdGet>>, TError = HTTPValidationError>(
 imageId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof detailImagePubImagesImageIdGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof detailImagePubImagesImageIdGet>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useDetailImagePubImagesImageIdGet<TData = Awaited<ReturnType<typeof detailImagePubImagesImageIdGet>>, TError = HTTPValidationError>(
 imageId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof detailImagePubImagesImageIdGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof detailImagePubImagesImageIdGet>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useDetailImagePubImagesImageIdGet<TData = Awaited<ReturnType<typeof detailImagePubImagesImageIdGet>>, TError = HTTPValidationError>(
 imageId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof detailImagePubImagesImageIdGet>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Detail Image
 */

export function useDetailImagePubImagesImageIdGet<TData = Awaited<ReturnType<typeof detailImagePubImagesImageIdGet>>, TError = HTTPValidationError>(
 imageId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof detailImagePubImagesImageIdGet>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getDetailImagePubImagesImageIdGetQueryOptions(imageId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



