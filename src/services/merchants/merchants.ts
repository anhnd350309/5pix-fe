/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * 5PIX BACKEND
 * 
        Base frame with FastAPI micro framework + Postgresql
            - Login/Register with JWT
            - Permission
            - CRUD User
            - Unit testing with Pytest
            - Dockerize
        
 * OpenAPI spec version: 0.1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  DataResponseMerchantDetailResponse,
  DataResponseMerchantItemResponse,
  GetMerchantsGetParams,
  HTTPValidationError,
  MerchantApproveRequest,
  MerchantCreateRequest,
  MerchantUpdateRequest,
  PageMerchantItemResponse
} from '../../schemas'
import { defaultMutator } from '../../api/axiosInstance';



/**
 * API Get list Merchant
 * @summary Get
 */
export const getMerchantsGet = (
    params?: GetMerchantsGetParams,
 signal?: AbortSignal
) => {
      
      
      return defaultMutator<PageMerchantItemResponse>(
      {url: `/merchants`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetMerchantsGetQueryKey = (params?: GetMerchantsGetParams,) => {
    return [`/merchants`, ...(params ? [params]: [])] as const;
    }

    
export const getGetMerchantsGetQueryOptions = <TData = Awaited<ReturnType<typeof getMerchantsGet>>, TError = HTTPValidationError>(params?: GetMerchantsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMerchantsGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMerchantsGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMerchantsGet>>> = ({ signal }) => getMerchantsGet(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMerchantsGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMerchantsGetQueryResult = NonNullable<Awaited<ReturnType<typeof getMerchantsGet>>>
export type GetMerchantsGetQueryError = HTTPValidationError


export function useGetMerchantsGet<TData = Awaited<ReturnType<typeof getMerchantsGet>>, TError = HTTPValidationError>(
 params: undefined |  GetMerchantsGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMerchantsGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMerchantsGet>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMerchantsGet<TData = Awaited<ReturnType<typeof getMerchantsGet>>, TError = HTTPValidationError>(
 params?: GetMerchantsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMerchantsGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMerchantsGet>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMerchantsGet<TData = Awaited<ReturnType<typeof getMerchantsGet>>, TError = HTTPValidationError>(
 params?: GetMerchantsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMerchantsGet>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get
 */

export function useGetMerchantsGet<TData = Awaited<ReturnType<typeof getMerchantsGet>>, TError = HTTPValidationError>(
 params?: GetMerchantsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMerchantsGet>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMerchantsGetQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * ### API ƒëƒÉng k√Ω l√†m Merchant cho ng∆∞·ªùi d√πng hi·ªán t·∫°i

**MerchantType:**
- `INDIVIDUAL`: C√° nh√¢n
- `COMPANY`: C√¥ng ty
- `OTHER`: Kh√°c

**MerchantYearsOfExperience:**
- `< 1`: √çt h∆°n 1 nƒÉm
- `1-3`: T·ª´ 1 ƒë·∫øn 3 nƒÉm
- `3-5`: T·ª´ 3 ƒë·∫øn 5 nƒÉm
- `> 5`: H∆°n 5 nƒÉm
 * @summary Register
 */
export const registerMerchantsPost = (
    merchantCreateRequest: MerchantCreateRequest,
 signal?: AbortSignal
) => {
      
      
      return defaultMutator<DataResponseMerchantItemResponse>(
      {url: `/merchants`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: merchantCreateRequest, signal
    },
      );
    }
  


export const getRegisterMerchantsPostMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof registerMerchantsPost>>, TError,{data: MerchantCreateRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof registerMerchantsPost>>, TError,{data: MerchantCreateRequest}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof registerMerchantsPost>>, {data: MerchantCreateRequest}> = (props) => {
          const {data} = props ?? {};

          return  registerMerchantsPost(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RegisterMerchantsPostMutationResult = NonNullable<Awaited<ReturnType<typeof registerMerchantsPost>>>
    export type RegisterMerchantsPostMutationBody = MerchantCreateRequest
    export type RegisterMerchantsPostMutationError = HTTPValidationError

    /**
 * @summary Register
 */
export const useRegisterMerchantsPost = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof registerMerchantsPost>>, TError,{data: MerchantCreateRequest}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof registerMerchantsPost>>,
        TError,
        {data: MerchantCreateRequest},
        TContext
      > => {

      const mutationOptions = getRegisterMerchantsPostMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * API get detail Merchant of current user
 * @summary Get Me
 */
export const getMeMerchantsGetMeGet = (
    
 signal?: AbortSignal
) => {
      
      
      return defaultMutator<DataResponseMerchantDetailResponse>(
      {url: `/merchants/get-me`, method: 'GET', signal
    },
      );
    }
  

export const getGetMeMerchantsGetMeGetQueryKey = () => {
    return [`/merchants/get-me`] as const;
    }

    
export const getGetMeMerchantsGetMeGetQueryOptions = <TData = Awaited<ReturnType<typeof getMeMerchantsGetMeGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeMerchantsGetMeGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeMerchantsGetMeGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeMerchantsGetMeGet>>> = ({ signal }) => getMeMerchantsGetMeGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMeMerchantsGetMeGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetMeMerchantsGetMeGetQueryResult = NonNullable<Awaited<ReturnType<typeof getMeMerchantsGetMeGet>>>
export type GetMeMerchantsGetMeGetQueryError = unknown


export function useGetMeMerchantsGetMeGet<TData = Awaited<ReturnType<typeof getMeMerchantsGetMeGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeMerchantsGetMeGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeMerchantsGetMeGet>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeMerchantsGetMeGet<TData = Awaited<ReturnType<typeof getMeMerchantsGetMeGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeMerchantsGetMeGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeMerchantsGetMeGet>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetMeMerchantsGetMeGet<TData = Awaited<ReturnType<typeof getMeMerchantsGetMeGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeMerchantsGetMeGet>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get Me
 */

export function useGetMeMerchantsGetMeGet<TData = Awaited<ReturnType<typeof getMeMerchantsGetMeGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMeMerchantsGetMeGet>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetMeMerchantsGetMeGetQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * API Detail Merchant
 * @summary Detail
 */
export const detailMerchantsMerchantIdGet = (
    merchantId: number,
 signal?: AbortSignal
) => {
      
      
      return defaultMutator<DataResponseMerchantDetailResponse>(
      {url: `/merchants/${merchantId}`, method: 'GET', signal
    },
      );
    }
  

export const getDetailMerchantsMerchantIdGetQueryKey = (merchantId: number,) => {
    return [`/merchants/${merchantId}`] as const;
    }

    
export const getDetailMerchantsMerchantIdGetQueryOptions = <TData = Awaited<ReturnType<typeof detailMerchantsMerchantIdGet>>, TError = HTTPValidationError>(merchantId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof detailMerchantsMerchantIdGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDetailMerchantsMerchantIdGetQueryKey(merchantId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof detailMerchantsMerchantIdGet>>> = ({ signal }) => detailMerchantsMerchantIdGet(merchantId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(merchantId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof detailMerchantsMerchantIdGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type DetailMerchantsMerchantIdGetQueryResult = NonNullable<Awaited<ReturnType<typeof detailMerchantsMerchantIdGet>>>
export type DetailMerchantsMerchantIdGetQueryError = HTTPValidationError


export function useDetailMerchantsMerchantIdGet<TData = Awaited<ReturnType<typeof detailMerchantsMerchantIdGet>>, TError = HTTPValidationError>(
 merchantId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof detailMerchantsMerchantIdGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof detailMerchantsMerchantIdGet>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useDetailMerchantsMerchantIdGet<TData = Awaited<ReturnType<typeof detailMerchantsMerchantIdGet>>, TError = HTTPValidationError>(
 merchantId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof detailMerchantsMerchantIdGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof detailMerchantsMerchantIdGet>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useDetailMerchantsMerchantIdGet<TData = Awaited<ReturnType<typeof detailMerchantsMerchantIdGet>>, TError = HTTPValidationError>(
 merchantId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof detailMerchantsMerchantIdGet>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Detail
 */

export function useDetailMerchantsMerchantIdGet<TData = Awaited<ReturnType<typeof detailMerchantsMerchantIdGet>>, TError = HTTPValidationError>(
 merchantId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof detailMerchantsMerchantIdGet>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getDetailMerchantsMerchantIdGetQueryOptions(merchantId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * ### API S·ª≠a Merchant c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i

**MerchantType:**
- `INDIVIDUAL`: C√° nh√¢n
- `COMPANY`: C√¥ng ty
- `OTHER`: Kh√°c

**MerchantYearsOfExperience:**
- `< 1`: √çt h∆°n 1 nƒÉm
- `1-3`: T·ª´ 1 ƒë·∫øn 3 nƒÉm
- `3-5`: T·ª´ 3 ƒë·∫øn 5 nƒÉm
- `> 5`: H∆°n 5 nƒÉm
 * @summary Update
 */
export const updateMerchantsUpdateMerchantPut = (
    merchantUpdateRequest: MerchantUpdateRequest,
 ) => {
      
      
      return defaultMutator<DataResponseMerchantItemResponse>(
      {url: `/merchants/update-merchant`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: merchantUpdateRequest
    },
      );
    }
  


export const getUpdateMerchantsUpdateMerchantPutMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateMerchantsUpdateMerchantPut>>, TError,{data: MerchantUpdateRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof updateMerchantsUpdateMerchantPut>>, TError,{data: MerchantUpdateRequest}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateMerchantsUpdateMerchantPut>>, {data: MerchantUpdateRequest}> = (props) => {
          const {data} = props ?? {};

          return  updateMerchantsUpdateMerchantPut(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateMerchantsUpdateMerchantPutMutationResult = NonNullable<Awaited<ReturnType<typeof updateMerchantsUpdateMerchantPut>>>
    export type UpdateMerchantsUpdateMerchantPutMutationBody = MerchantUpdateRequest
    export type UpdateMerchantsUpdateMerchantPutMutationError = HTTPValidationError

    /**
 * @summary Update
 */
export const useUpdateMerchantsUpdateMerchantPut = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateMerchantsUpdateMerchantPut>>, TError,{data: MerchantUpdateRequest}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof updateMerchantsUpdateMerchantPut>>,
        TError,
        {data: MerchantUpdateRequest},
        TContext
      > => {

      const mutationOptions = getUpdateMerchantsUpdateMerchantPutMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * ### API ƒë·ªÉ Admin th·ª±c hi·ªán Approve/Reject Merchant - role admin m·ªõi s·ª≠ d·ª•ng ƒë∆∞·ª£c

**MerchantApprovedStatus:**
- `approved`: Duy·ªát
- `waiting_for_approve`: Ch·ªù duy·ªát
- `rejected`: T·ª´ ch·ªëi
 * @summary Approve Merchant
 */
export const approveMerchantMerchantsApproveMerchantPost = (
    merchantApproveRequest: MerchantApproveRequest,
 signal?: AbortSignal
) => {
      
      
      return defaultMutator<unknown>(
      {url: `/merchants/approve-merchant`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: merchantApproveRequest, signal
    },
      );
    }
  


export const getApproveMerchantMerchantsApproveMerchantPostMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof approveMerchantMerchantsApproveMerchantPost>>, TError,{data: MerchantApproveRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof approveMerchantMerchantsApproveMerchantPost>>, TError,{data: MerchantApproveRequest}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof approveMerchantMerchantsApproveMerchantPost>>, {data: MerchantApproveRequest}> = (props) => {
          const {data} = props ?? {};

          return  approveMerchantMerchantsApproveMerchantPost(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ApproveMerchantMerchantsApproveMerchantPostMutationResult = NonNullable<Awaited<ReturnType<typeof approveMerchantMerchantsApproveMerchantPost>>>
    export type ApproveMerchantMerchantsApproveMerchantPostMutationBody = MerchantApproveRequest
    export type ApproveMerchantMerchantsApproveMerchantPostMutationError = HTTPValidationError

    /**
 * @summary Approve Merchant
 */
export const useApproveMerchantMerchantsApproveMerchantPost = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof approveMerchantMerchantsApproveMerchantPost>>, TError,{data: MerchantApproveRequest}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof approveMerchantMerchantsApproveMerchantPost>>,
        TError,
        {data: MerchantApproveRequest},
        TContext
      > => {

      const mutationOptions = getApproveMerchantMerchantsApproveMerchantPostMutationOptions(options);

      return useMutation(mutationOptions);
    }
    