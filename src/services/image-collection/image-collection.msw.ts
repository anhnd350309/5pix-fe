/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * 5PIX BACKEND
 * 
        Base frame with FastAPI micro framework + Postgresql
            - Login/Register with JWT
            - Permission
            - CRUD User
            - Unit testing with Pytest
            - Dockerize
        
 * OpenAPI spec version: 0.1.0
 */
import {
  faker
} from '@faker-js/faker'
import {
  HttpResponse,
  delay,
  http
} from 'msw'
import {
  OrderInternalStatus
} from '../../schemas'
import type {
  AddImageResponse,
  CollectionImageResponse,
  ItemResponse,
  PageCollectionImageResponse,
  PageOwnedImageResponse,
  RemoveImageResponse
} from '../../schemas'

export const getGetImageCollectionGetResponseMock = (overrideResponse: Partial< PageCollectionImageResponse > = {}): PageCollectionImageResponse => ({code: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({album_id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), album_image_price: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), album_name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), album_price: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), album_slug: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), estimate_price: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.number.int({min: undefined, max: undefined}), name: faker.string.alpha(20), order_id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order_internal_status: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(OrderInternalStatus)), undefined]), owner_id: faker.number.int({min: undefined, max: undefined})})), message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), metadata: {current_page: faker.number.int({min: undefined, max: undefined}), page_size: faker.number.int({min: undefined, max: undefined}), total_items: faker.number.int({min: undefined, max: undefined})}, ...overrideResponse})

export const getGetImageCollectionCollectionItemGetResponseMock = (): ItemResponse[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({album_id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), album_image_id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), album_image_name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), album_image_url: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), collection_name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), id: faker.number.int({min: undefined, max: undefined}), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), order_id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), owner_id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getCreateImageCollectionCreatePostResponseMock = (overrideResponse: Partial< CollectionImageResponse > = {}): CollectionImageResponse => ({album_id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), album_image_price: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), album_name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), album_price: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), album_slug: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), estimate_price: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.number.int({min: undefined, max: undefined}), name: faker.string.alpha(20), order_id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order_internal_status: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(OrderInternalStatus)), undefined]), owner_id: faker.number.int({min: undefined, max: undefined}), ...overrideResponse})

export const getAddImageImageCollectionAddImagePostResponseMock = (overrideResponse: Partial< AddImageResponse > = {}): AddImageResponse => ({album_id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), album_images_id: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.number.int({min: undefined, max: undefined}))), undefined]), album_name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), collection_item_ids: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.number.int({min: undefined, max: undefined}))), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), order_id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), owner_id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})

export const getRemoveImageImageCollectionRemoveImageDeleteResponseMock = (overrideResponse: Partial< RemoveImageResponse > = {}): RemoveImageResponse => ({album_images_id: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.number.int({min: undefined, max: undefined}))), undefined]), album_name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), collection_id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), collection_item_ids: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.number.int({min: undefined, max: undefined}))), undefined]), ...overrideResponse})

export const getGetOwnedImagesImageCollectionOwnedImagesGetResponseMock = (overrideResponse: Partial< PageOwnedImageResponse > = {}): PageOwnedImageResponse => ({code: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({album_id: faker.number.int({min: undefined, max: undefined}), album_image_id: faker.number.int({min: undefined, max: undefined}), album_image_index_status: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), cdn_image_url: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), image_metadata: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), is_hide: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), s3_image_url: faker.helpers.arrayElement([faker.string.alpha(20), undefined])})), message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), metadata: {current_page: faker.number.int({min: undefined, max: undefined}), page_size: faker.number.int({min: undefined, max: undefined}), total_items: faker.number.int({min: undefined, max: undefined})}, ...overrideResponse})

export const getAddImageImageCollectionClearOrderPutResponseMock = (overrideResponse: Partial< AddImageResponse > = {}): AddImageResponse => ({album_id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), album_images_id: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.number.int({min: undefined, max: undefined}))), undefined]), album_name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), collection_item_ids: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.number.int({min: undefined, max: undefined}))), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), order_id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), owner_id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})


export const getGetImageCollectionGetMockHandler = (overrideResponse?: PageCollectionImageResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<PageCollectionImageResponse> | PageCollectionImageResponse)) => {
  return http.get('*/image-collection', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetImageCollectionGetResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetImageCollectionCollectionItemGetMockHandler = (overrideResponse?: ItemResponse[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<ItemResponse[]> | ItemResponse[])) => {
  return http.get('*/image-collection/collection-item', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetImageCollectionCollectionItemGetResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getCreateImageCollectionCreatePostMockHandler = (overrideResponse?: CollectionImageResponse | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<CollectionImageResponse> | CollectionImageResponse)) => {
  return http.post('*/image-collection/create', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCreateImageCollectionCreatePostResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getAddImageImageCollectionAddImagePostMockHandler = (overrideResponse?: AddImageResponse | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<AddImageResponse> | AddImageResponse)) => {
  return http.post('*/image-collection/add-image', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAddImageImageCollectionAddImagePostResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getRemoveImageImageCollectionRemoveImageDeleteMockHandler = (overrideResponse?: RemoveImageResponse | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<RemoveImageResponse> | RemoveImageResponse)) => {
  return http.delete('*/image-collection/remove-image', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getRemoveImageImageCollectionRemoveImageDeleteResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetOwnedImagesImageCollectionOwnedImagesGetMockHandler = (overrideResponse?: PageOwnedImageResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<PageOwnedImageResponse> | PageOwnedImageResponse)) => {
  return http.get('*/image-collection/owned-images', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetOwnedImagesImageCollectionOwnedImagesGetResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getAddImageImageCollectionClearOrderPutMockHandler = (overrideResponse?: AddImageResponse | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<AddImageResponse> | AddImageResponse)) => {
  return http.put('*/image-collection/clear-order', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getAddImageImageCollectionClearOrderPutResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}
export const getImageCollectionMock = () => [
  getGetImageCollectionGetMockHandler(),
  getGetImageCollectionCollectionItemGetMockHandler(),
  getCreateImageCollectionCreatePostMockHandler(),
  getAddImageImageCollectionAddImagePostMockHandler(),
  getRemoveImageImageCollectionRemoveImageDeleteMockHandler(),
  getGetOwnedImagesImageCollectionOwnedImagesGetMockHandler(),
  getAddImageImageCollectionClearOrderPutMockHandler()
]
