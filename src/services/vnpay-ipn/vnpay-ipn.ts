/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * 5PIX BACKEND
 * 
        Base frame with FastAPI micro framework + Postgresql
            - Login/Register with JWT
            - Permission
            - CRUD User
            - Unit testing with Pytest
            - Dockerize
        
 * OpenAPI spec version: 0.1.0
 */
import {
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  GetPaymentVnpayGetPaymentGetParams,
  HTTPValidationError,
  VnpayDto
} from '../../schemas'
import { defaultMutator } from '../../api/axiosInstance';



/**
 * ### Get link vnpay để redirect 
Truyền return_url về trang của FE để show trạng thái thanh toán 
 API /vnpay/check là default return url
 * @summary Get Payment
 */
export const getPaymentVnpayGetPaymentGet = (
    params: GetPaymentVnpayGetPaymentGetParams,
 signal?: AbortSignal
) => {
      
      
      return defaultMutator<VnpayDto>(
      {url: `/vnpay/get-payment`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetPaymentVnpayGetPaymentGetQueryKey = (params: GetPaymentVnpayGetPaymentGetParams,) => {
    return [`/vnpay/get-payment`, ...(params ? [params]: [])] as const;
    }

    
export const getGetPaymentVnpayGetPaymentGetQueryOptions = <TData = Awaited<ReturnType<typeof getPaymentVnpayGetPaymentGet>>, TError = HTTPValidationError>(params: GetPaymentVnpayGetPaymentGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPaymentVnpayGetPaymentGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPaymentVnpayGetPaymentGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPaymentVnpayGetPaymentGet>>> = ({ signal }) => getPaymentVnpayGetPaymentGet(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPaymentVnpayGetPaymentGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetPaymentVnpayGetPaymentGetQueryResult = NonNullable<Awaited<ReturnType<typeof getPaymentVnpayGetPaymentGet>>>
export type GetPaymentVnpayGetPaymentGetQueryError = HTTPValidationError


export function useGetPaymentVnpayGetPaymentGet<TData = Awaited<ReturnType<typeof getPaymentVnpayGetPaymentGet>>, TError = HTTPValidationError>(
 params: GetPaymentVnpayGetPaymentGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPaymentVnpayGetPaymentGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPaymentVnpayGetPaymentGet>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPaymentVnpayGetPaymentGet<TData = Awaited<ReturnType<typeof getPaymentVnpayGetPaymentGet>>, TError = HTTPValidationError>(
 params: GetPaymentVnpayGetPaymentGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPaymentVnpayGetPaymentGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPaymentVnpayGetPaymentGet>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetPaymentVnpayGetPaymentGet<TData = Awaited<ReturnType<typeof getPaymentVnpayGetPaymentGet>>, TError = HTTPValidationError>(
 params: GetPaymentVnpayGetPaymentGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPaymentVnpayGetPaymentGet>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get Payment
 */

export function useGetPaymentVnpayGetPaymentGet<TData = Awaited<ReturnType<typeof getPaymentVnpayGetPaymentGet>>, TError = HTTPValidationError>(
 params: GetPaymentVnpayGetPaymentGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPaymentVnpayGetPaymentGet>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetPaymentVnpayGetPaymentGetQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * ### Để FE check trạng thái thanh toán của VNPAY VNPAY default sẽ redirect về đây của BE
 * @summary Check Query Params
 */
export const checkQueryParamsVnpayCheckGet = (
    
 signal?: AbortSignal
) => {
      
      
      return defaultMutator<VnpayDto>(
      {url: `/vnpay/check`, method: 'GET', signal
    },
      );
    }
  

export const getCheckQueryParamsVnpayCheckGetQueryKey = () => {
    return [`/vnpay/check`] as const;
    }

    
export const getCheckQueryParamsVnpayCheckGetQueryOptions = <TData = Awaited<ReturnType<typeof checkQueryParamsVnpayCheckGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof checkQueryParamsVnpayCheckGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCheckQueryParamsVnpayCheckGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof checkQueryParamsVnpayCheckGet>>> = ({ signal }) => checkQueryParamsVnpayCheckGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof checkQueryParamsVnpayCheckGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type CheckQueryParamsVnpayCheckGetQueryResult = NonNullable<Awaited<ReturnType<typeof checkQueryParamsVnpayCheckGet>>>
export type CheckQueryParamsVnpayCheckGetQueryError = unknown


export function useCheckQueryParamsVnpayCheckGet<TData = Awaited<ReturnType<typeof checkQueryParamsVnpayCheckGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof checkQueryParamsVnpayCheckGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof checkQueryParamsVnpayCheckGet>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useCheckQueryParamsVnpayCheckGet<TData = Awaited<ReturnType<typeof checkQueryParamsVnpayCheckGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof checkQueryParamsVnpayCheckGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof checkQueryParamsVnpayCheckGet>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useCheckQueryParamsVnpayCheckGet<TData = Awaited<ReturnType<typeof checkQueryParamsVnpayCheckGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof checkQueryParamsVnpayCheckGet>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Check Query Params
 */

export function useCheckQueryParamsVnpayCheckGet<TData = Awaited<ReturnType<typeof checkQueryParamsVnpayCheckGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof checkQueryParamsVnpayCheckGet>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getCheckQueryParamsVnpayCheckGetQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * ### Để VNPAY gửi event thanh toán
 * @summary Process Payment
 */
export const processPaymentVnpayIPNGet = (
    
 signal?: AbortSignal
) => {
      
      
      return defaultMutator<VnpayDto>(
      {url: `/vnpay/IPN`, method: 'GET', signal
    },
      );
    }
  

export const getProcessPaymentVnpayIPNGetQueryKey = () => {
    return [`/vnpay/IPN`] as const;
    }

    
export const getProcessPaymentVnpayIPNGetQueryOptions = <TData = Awaited<ReturnType<typeof processPaymentVnpayIPNGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof processPaymentVnpayIPNGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getProcessPaymentVnpayIPNGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof processPaymentVnpayIPNGet>>> = ({ signal }) => processPaymentVnpayIPNGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof processPaymentVnpayIPNGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type ProcessPaymentVnpayIPNGetQueryResult = NonNullable<Awaited<ReturnType<typeof processPaymentVnpayIPNGet>>>
export type ProcessPaymentVnpayIPNGetQueryError = unknown


export function useProcessPaymentVnpayIPNGet<TData = Awaited<ReturnType<typeof processPaymentVnpayIPNGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof processPaymentVnpayIPNGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof processPaymentVnpayIPNGet>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useProcessPaymentVnpayIPNGet<TData = Awaited<ReturnType<typeof processPaymentVnpayIPNGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof processPaymentVnpayIPNGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof processPaymentVnpayIPNGet>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useProcessPaymentVnpayIPNGet<TData = Awaited<ReturnType<typeof processPaymentVnpayIPNGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof processPaymentVnpayIPNGet>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Process Payment
 */

export function useProcessPaymentVnpayIPNGet<TData = Awaited<ReturnType<typeof processPaymentVnpayIPNGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof processPaymentVnpayIPNGet>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getProcessPaymentVnpayIPNGetQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



