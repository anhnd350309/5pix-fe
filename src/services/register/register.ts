/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * 5PIX BACKEND
 * 
        Base frame with FastAPI micro framework + Postgresql
            - Login/Register with JWT
            - Permission
            - CRUD User
            - Unit testing with Pytest
            - Dockerize
        
 * OpenAPI spec version: 0.1.0
 */
import {
  useMutation
} from '@tanstack/react-query'
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query'
import type {
  DataResponseUserItemResponse,
  HTTPValidationError,
  UserRegisterRequest
} from '../../schemas'
import { defaultMutator } from '../../api/axiosInstance';



/**
 * @summary Register
 */
export const registerRegisterPost = (
    userRegisterRequest: UserRegisterRequest,
 signal?: AbortSignal
) => {
      
      
      return defaultMutator<DataResponseUserItemResponse>(
      {url: `/register`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: userRegisterRequest, signal
    },
      );
    }
  


export const getRegisterRegisterPostMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof registerRegisterPost>>, TError,{data: UserRegisterRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof registerRegisterPost>>, TError,{data: UserRegisterRequest}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof registerRegisterPost>>, {data: UserRegisterRequest}> = (props) => {
          const {data} = props ?? {};

          return  registerRegisterPost(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RegisterRegisterPostMutationResult = NonNullable<Awaited<ReturnType<typeof registerRegisterPost>>>
    export type RegisterRegisterPostMutationBody = UserRegisterRequest
    export type RegisterRegisterPostMutationError = HTTPValidationError

    /**
 * @summary Register
 */
export const useRegisterRegisterPost = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof registerRegisterPost>>, TError,{data: UserRegisterRequest}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof registerRegisterPost>>,
        TError,
        {data: UserRegisterRequest},
        TContext
      > => {

      const mutationOptions = getRegisterRegisterPostMutationOptions(options);

      return useMutation(mutationOptions);
    }
    