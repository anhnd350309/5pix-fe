/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * 5PIX BACKEND
 * 
        Base frame with FastAPI micro framework + Postgresql
            - Login/Register with JWT
            - Permission
            - CRUD User
            - Unit testing with Pytest
            - Dockerize
        
 * OpenAPI spec version: 0.1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  AlbumCreateRequest,
  AlbumUpdateRequest,
  DataResponseAlbumDetailResponse,
  DataResponseAlbumItemResponse,
  DataResponseStr,
  GetAlbumsGetParams,
  HTTPValidationError,
  PageAlbumItemResponse
} from '../../schemas'
import { defaultMutator } from '../../api/axiosInstance';



/**
 * ### API Get list Album của người dùng hiện tại

- Nếu role là merchant thì chỉ load ra album của chính merchant 
- Nếu role là admin thì load hết
- Role khác ko hiển thị gì
 * @summary Get
 */
export const getAlbumsGet = (
    params?: GetAlbumsGetParams,
 signal?: AbortSignal
) => {
      
      
      return defaultMutator<PageAlbumItemResponse>(
      {url: `/albums`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetAlbumsGetQueryKey = (params?: GetAlbumsGetParams,) => {
    return [`/albums`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAlbumsGetQueryOptions = <TData = Awaited<ReturnType<typeof getAlbumsGet>>, TError = HTTPValidationError>(params?: GetAlbumsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAlbumsGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAlbumsGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAlbumsGet>>> = ({ signal }) => getAlbumsGet(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAlbumsGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetAlbumsGetQueryResult = NonNullable<Awaited<ReturnType<typeof getAlbumsGet>>>
export type GetAlbumsGetQueryError = HTTPValidationError


export function useGetAlbumsGet<TData = Awaited<ReturnType<typeof getAlbumsGet>>, TError = HTTPValidationError>(
 params: undefined |  GetAlbumsGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAlbumsGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAlbumsGet>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetAlbumsGet<TData = Awaited<ReturnType<typeof getAlbumsGet>>, TError = HTTPValidationError>(
 params?: GetAlbumsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAlbumsGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAlbumsGet>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetAlbumsGet<TData = Awaited<ReturnType<typeof getAlbumsGet>>, TError = HTTPValidationError>(
 params?: GetAlbumsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAlbumsGet>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get
 */

export function useGetAlbumsGet<TData = Awaited<ReturnType<typeof getAlbumsGet>>, TError = HTTPValidationError>(
 params?: GetAlbumsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAlbumsGet>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetAlbumsGetQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * API Create Album
 * @summary Create
 */
export const createAlbumsPost = (
    albumCreateRequest: AlbumCreateRequest,
 signal?: AbortSignal
) => {
      
      
      return defaultMutator<DataResponseAlbumItemResponse>(
      {url: `/albums`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: albumCreateRequest, signal
    },
      );
    }
  


export const getCreateAlbumsPostMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createAlbumsPost>>, TError,{data: AlbumCreateRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof createAlbumsPost>>, TError,{data: AlbumCreateRequest}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createAlbumsPost>>, {data: AlbumCreateRequest}> = (props) => {
          const {data} = props ?? {};

          return  createAlbumsPost(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateAlbumsPostMutationResult = NonNullable<Awaited<ReturnType<typeof createAlbumsPost>>>
    export type CreateAlbumsPostMutationBody = AlbumCreateRequest
    export type CreateAlbumsPostMutationError = HTTPValidationError

    /**
 * @summary Create
 */
export const useCreateAlbumsPost = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createAlbumsPost>>, TError,{data: AlbumCreateRequest}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof createAlbumsPost>>,
        TError,
        {data: AlbumCreateRequest},
        TContext
      > => {

      const mutationOptions = getCreateAlbumsPostMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * ### API Get detail Album

- total_image là số lượng tất cả các ảnh đã thêm vào hệ thống, kể cả đã nhận dạng hoặc chưa nhận dạng 
- loaded là số lượng ảnh đã được upload lên hệ thống nhưng chưa nhận dạng 
- indexing là số lượng ảnh đang trong quá trình nhận dạng 
- index_complete là số lượng ảnh đã được nhận dạng xong
 * @summary Detail
 */
export const detailAlbumsAlbumIdGet = (
    albumId: number,
 signal?: AbortSignal
) => {
      
      
      return defaultMutator<DataResponseAlbumDetailResponse>(
      {url: `/albums/${albumId}`, method: 'GET', signal
    },
      );
    }
  

export const getDetailAlbumsAlbumIdGetQueryKey = (albumId: number,) => {
    return [`/albums/${albumId}`] as const;
    }

    
export const getDetailAlbumsAlbumIdGetQueryOptions = <TData = Awaited<ReturnType<typeof detailAlbumsAlbumIdGet>>, TError = HTTPValidationError>(albumId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof detailAlbumsAlbumIdGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDetailAlbumsAlbumIdGetQueryKey(albumId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof detailAlbumsAlbumIdGet>>> = ({ signal }) => detailAlbumsAlbumIdGet(albumId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(albumId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof detailAlbumsAlbumIdGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type DetailAlbumsAlbumIdGetQueryResult = NonNullable<Awaited<ReturnType<typeof detailAlbumsAlbumIdGet>>>
export type DetailAlbumsAlbumIdGetQueryError = HTTPValidationError


export function useDetailAlbumsAlbumIdGet<TData = Awaited<ReturnType<typeof detailAlbumsAlbumIdGet>>, TError = HTTPValidationError>(
 albumId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof detailAlbumsAlbumIdGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof detailAlbumsAlbumIdGet>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useDetailAlbumsAlbumIdGet<TData = Awaited<ReturnType<typeof detailAlbumsAlbumIdGet>>, TError = HTTPValidationError>(
 albumId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof detailAlbumsAlbumIdGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof detailAlbumsAlbumIdGet>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useDetailAlbumsAlbumIdGet<TData = Awaited<ReturnType<typeof detailAlbumsAlbumIdGet>>, TError = HTTPValidationError>(
 albumId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof detailAlbumsAlbumIdGet>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Detail
 */

export function useDetailAlbumsAlbumIdGet<TData = Awaited<ReturnType<typeof detailAlbumsAlbumIdGet>>, TError = HTTPValidationError>(
 albumId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof detailAlbumsAlbumIdGet>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getDetailAlbumsAlbumIdGetQueryOptions(albumId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * API update Album
 * @summary Update
 */
export const updateAlbumsAlbumIdPut = (
    albumId: number,
    albumUpdateRequest: AlbumUpdateRequest,
 ) => {
      
      
      return defaultMutator<DataResponseAlbumItemResponse>(
      {url: `/albums/${albumId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: albumUpdateRequest
    },
      );
    }
  


export const getUpdateAlbumsAlbumIdPutMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateAlbumsAlbumIdPut>>, TError,{albumId: number;data: AlbumUpdateRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof updateAlbumsAlbumIdPut>>, TError,{albumId: number;data: AlbumUpdateRequest}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateAlbumsAlbumIdPut>>, {albumId: number;data: AlbumUpdateRequest}> = (props) => {
          const {albumId,data} = props ?? {};

          return  updateAlbumsAlbumIdPut(albumId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateAlbumsAlbumIdPutMutationResult = NonNullable<Awaited<ReturnType<typeof updateAlbumsAlbumIdPut>>>
    export type UpdateAlbumsAlbumIdPutMutationBody = AlbumUpdateRequest
    export type UpdateAlbumsAlbumIdPutMutationError = HTTPValidationError

    /**
 * @summary Update
 */
export const useUpdateAlbumsAlbumIdPut = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateAlbumsAlbumIdPut>>, TError,{albumId: number;data: AlbumUpdateRequest}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof updateAlbumsAlbumIdPut>>,
        TError,
        {albumId: number;data: AlbumUpdateRequest},
        TContext
      > => {

      const mutationOptions = getUpdateAlbumsAlbumIdPutMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * API start process read image from file and Upload to S3
 * @summary Process Image
 */
export const processImageAlbumsAlbumIdProcessImagePut = (
    albumId: number,
 ) => {
      
      
      return defaultMutator<DataResponseStr>(
      {url: `/albums/${albumId}/process-image`, method: 'PUT'
    },
      );
    }
  


export const getProcessImageAlbumsAlbumIdProcessImagePutMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof processImageAlbumsAlbumIdProcessImagePut>>, TError,{albumId: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof processImageAlbumsAlbumIdProcessImagePut>>, TError,{albumId: number}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof processImageAlbumsAlbumIdProcessImagePut>>, {albumId: number}> = (props) => {
          const {albumId} = props ?? {};

          return  processImageAlbumsAlbumIdProcessImagePut(albumId,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ProcessImageAlbumsAlbumIdProcessImagePutMutationResult = NonNullable<Awaited<ReturnType<typeof processImageAlbumsAlbumIdProcessImagePut>>>
    
    export type ProcessImageAlbumsAlbumIdProcessImagePutMutationError = HTTPValidationError

    /**
 * @summary Process Image
 */
export const useProcessImageAlbumsAlbumIdProcessImagePut = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof processImageAlbumsAlbumIdProcessImagePut>>, TError,{albumId: number}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof processImageAlbumsAlbumIdProcessImagePut>>,
        TError,
        {albumId: number},
        TContext
      > => {

      const mutationOptions = getProcessImageAlbumsAlbumIdProcessImagePutMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * ### API load image from sever or google driver to S3 and save data to DB

Logic: Tuỳ theo cấu hình của album là load từ google drive hay từ server mà thực hiện lấy ảnh lên S3
- Nếu là từ google drive thì sẽ sync (kèm check trùng) ảnh từ google drive về sever -> S3 -> insert DB album_image
- Nếu là từ sever thì sẽ lấy ảnh từ sever lên S3 -> insert DB album_image- API này phải gọi cách nhau ít nhất là 30s
 * @summary Load Image
 */
export const loadImageAlbumsAlbumIdLoadImagePost = (
    albumId: number,
 signal?: AbortSignal
) => {
      
      
      return defaultMutator<DataResponseStr>(
      {url: `/albums/${albumId}/load-image`, method: 'POST', signal
    },
      );
    }
  


export const getLoadImageAlbumsAlbumIdLoadImagePostMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof loadImageAlbumsAlbumIdLoadImagePost>>, TError,{albumId: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof loadImageAlbumsAlbumIdLoadImagePost>>, TError,{albumId: number}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof loadImageAlbumsAlbumIdLoadImagePost>>, {albumId: number}> = (props) => {
          const {albumId} = props ?? {};

          return  loadImageAlbumsAlbumIdLoadImagePost(albumId,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type LoadImageAlbumsAlbumIdLoadImagePostMutationResult = NonNullable<Awaited<ReturnType<typeof loadImageAlbumsAlbumIdLoadImagePost>>>
    
    export type LoadImageAlbumsAlbumIdLoadImagePostMutationError = HTTPValidationError

    /**
 * @summary Load Image
 */
export const useLoadImageAlbumsAlbumIdLoadImagePost = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof loadImageAlbumsAlbumIdLoadImagePost>>, TError,{albumId: number}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof loadImageAlbumsAlbumIdLoadImagePost>>,
        TError,
        {albumId: number},
        TContext
      > => {

      const mutationOptions = getLoadImageAlbumsAlbumIdLoadImagePostMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * ### API index image

Logic: lấy list ảnh chưa index -> chuyển sang trạng thái INDEXING -> Tạo row trong credit để trừ tiền -> push các ảnh lên msq -> msq thực hiện index & update ảnh sang COMPLETED
 * @summary Index Image
 */
export const indexImageAlbumsAlbumIdIndexImagePost = (
    albumId: number,
 signal?: AbortSignal
) => {
      
      
      return defaultMutator<DataResponseStr>(
      {url: `/albums/${albumId}/index-image`, method: 'POST', signal
    },
      );
    }
  


export const getIndexImageAlbumsAlbumIdIndexImagePostMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof indexImageAlbumsAlbumIdIndexImagePost>>, TError,{albumId: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof indexImageAlbumsAlbumIdIndexImagePost>>, TError,{albumId: number}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof indexImageAlbumsAlbumIdIndexImagePost>>, {albumId: number}> = (props) => {
          const {albumId} = props ?? {};

          return  indexImageAlbumsAlbumIdIndexImagePost(albumId,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type IndexImageAlbumsAlbumIdIndexImagePostMutationResult = NonNullable<Awaited<ReturnType<typeof indexImageAlbumsAlbumIdIndexImagePost>>>
    
    export type IndexImageAlbumsAlbumIdIndexImagePostMutationError = HTTPValidationError

    /**
 * @summary Index Image
 */
export const useIndexImageAlbumsAlbumIdIndexImagePost = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof indexImageAlbumsAlbumIdIndexImagePost>>, TError,{albumId: number}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof indexImageAlbumsAlbumIdIndexImagePost>>,
        TError,
        {albumId: number},
        TContext
      > => {

      const mutationOptions = getIndexImageAlbumsAlbumIdIndexImagePostMutationOptions(options);

      return useMutation(mutationOptions);
    }
    