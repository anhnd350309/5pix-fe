/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * 5PIX BACKEND
 * 
        Base frame with FastAPI micro framework + Postgresql
            - Login/Register with JWT
            - Permission
            - CRUD User
            - Unit testing with Pytest
            - Dockerize
        
 * OpenAPI spec version: 0.1.0
 */
import {
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import { defaultMutator } from '../../api/axiosInstance';



/**
 * @summary Metrics
 */
export const metricsMetricsGet = (
    
 signal?: AbortSignal
) => {
      
      
      return defaultMutator<unknown>(
      {url: `/metrics`, method: 'GET', signal
    },
      );
    }
  

export const getMetricsMetricsGetQueryKey = () => {
    return [`/metrics`] as const;
    }

    
export const getMetricsMetricsGetQueryOptions = <TData = Awaited<ReturnType<typeof metricsMetricsGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof metricsMetricsGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getMetricsMetricsGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof metricsMetricsGet>>> = ({ signal }) => metricsMetricsGet(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof metricsMetricsGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type MetricsMetricsGetQueryResult = NonNullable<Awaited<ReturnType<typeof metricsMetricsGet>>>
export type MetricsMetricsGetQueryError = unknown


export function useMetricsMetricsGet<TData = Awaited<ReturnType<typeof metricsMetricsGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof metricsMetricsGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof metricsMetricsGet>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useMetricsMetricsGet<TData = Awaited<ReturnType<typeof metricsMetricsGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof metricsMetricsGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof metricsMetricsGet>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useMetricsMetricsGet<TData = Awaited<ReturnType<typeof metricsMetricsGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof metricsMetricsGet>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Metrics
 */

export function useMetricsMetricsGet<TData = Awaited<ReturnType<typeof metricsMetricsGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof metricsMetricsGet>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getMetricsMetricsGetQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



