/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * 5PIX BACKEND
 * 
        Base frame with FastAPI micro framework + Postgresql
            - Login/Register with JWT
            - Permission
            - CRUD User
            - Unit testing with Pytest
            - Dockerize
        
 * OpenAPI spec version: 0.1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  CreditRequest,
  CreditWalletResponse,
  GetCreditGetParams,
  HTTPValidationError,
  PageCreditLogResponse
} from '../../schemas'
import { defaultMutator } from '../../api/axiosInstance';



/**
 * API Get list Collection
 * @summary Get
 */
export const getCreditGet = (
    params?: GetCreditGetParams,
 signal?: AbortSignal
) => {
      
      
      return defaultMutator<PageCreditLogResponse>(
      {url: `/credit`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetCreditGetQueryKey = (params?: GetCreditGetParams,) => {
    return [`/credit`, ...(params ? [params]: [])] as const;
    }

    
export const getGetCreditGetQueryOptions = <TData = Awaited<ReturnType<typeof getCreditGet>>, TError = HTTPValidationError>(params?: GetCreditGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCreditGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCreditGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCreditGet>>> = ({ signal }) => getCreditGet(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCreditGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetCreditGetQueryResult = NonNullable<Awaited<ReturnType<typeof getCreditGet>>>
export type GetCreditGetQueryError = HTTPValidationError


export function useGetCreditGet<TData = Awaited<ReturnType<typeof getCreditGet>>, TError = HTTPValidationError>(
 params: undefined |  GetCreditGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCreditGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCreditGet>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetCreditGet<TData = Awaited<ReturnType<typeof getCreditGet>>, TError = HTTPValidationError>(
 params?: GetCreditGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCreditGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCreditGet>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetCreditGet<TData = Awaited<ReturnType<typeof getCreditGet>>, TError = HTTPValidationError>(
 params?: GetCreditGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCreditGet>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get
 */

export function useGetCreditGet<TData = Awaited<ReturnType<typeof getCreditGet>>, TError = HTTPValidationError>(
 params?: GetCreditGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCreditGet>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetCreditGetQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * ### API Update credit cho người dùng

- Chỉ admin mới có quyền update credit cho người dùng khác

        Category:

        INCREASE = 'INCREASE'

        DECREASE = 'DECREASE'

        NO_CHANGE = 'NO_CHANGE'
 * @summary Update Credit
 */
export const updateCreditCreditAdminUpdateCreditPut = (
    creditRequest: CreditRequest,
 ) => {
      
      
      return defaultMutator<CreditWalletResponse>(
      {url: `/credit/admin/update-credit`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: creditRequest
    },
      );
    }
  


export const getUpdateCreditCreditAdminUpdateCreditPutMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateCreditCreditAdminUpdateCreditPut>>, TError,{data: CreditRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof updateCreditCreditAdminUpdateCreditPut>>, TError,{data: CreditRequest}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateCreditCreditAdminUpdateCreditPut>>, {data: CreditRequest}> = (props) => {
          const {data} = props ?? {};

          return  updateCreditCreditAdminUpdateCreditPut(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateCreditCreditAdminUpdateCreditPutMutationResult = NonNullable<Awaited<ReturnType<typeof updateCreditCreditAdminUpdateCreditPut>>>
    export type UpdateCreditCreditAdminUpdateCreditPutMutationBody = CreditRequest
    export type UpdateCreditCreditAdminUpdateCreditPutMutationError = HTTPValidationError

    /**
 * @summary Update Credit
 */
export const useUpdateCreditCreditAdminUpdateCreditPut = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateCreditCreditAdminUpdateCreditPut>>, TError,{data: CreditRequest}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof updateCreditCreditAdminUpdateCreditPut>>,
        TError,
        {data: CreditRequest},
        TContext
      > => {

      const mutationOptions = getUpdateCreditCreditAdminUpdateCreditPutMutationOptions(options);

      return useMutation(mutationOptions);
    }
    