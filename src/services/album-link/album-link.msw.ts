/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * 5PIX BACKEND
 * 
        Base frame with FastAPI micro framework + Postgresql
            - Login/Register with JWT
            - Permission
            - CRUD User
            - Unit testing with Pytest
            - Dockerize
        
 * OpenAPI spec version: 0.1.0
 */
import {
  faker
} from '@faker-js/faker'
import {
  HttpResponse,
  delay,
  http
} from 'msw'
import type {
  AlbumLinkItemResponse,
  DataResponseStr
} from '../../schemas'

export const getGetAlbumLinkGetResponseMock = (): AlbumLinkItemResponse[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({album_id: faker.number.int({min: undefined, max: undefined}), hash_text: faker.string.alpha(20), keyword: faker.string.alpha(20)})))

export const getBulkCreateAlbumLinkPostResponseMock = (overrideResponse: Partial< DataResponseStr > = {}): DataResponseStr => ({code: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), ...overrideResponse})


export const getGetAlbumLinkGetMockHandler = (overrideResponse?: AlbumLinkItemResponse[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<AlbumLinkItemResponse[]> | AlbumLinkItemResponse[])) => {
  return http.get('*/album-link', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetAlbumLinkGetResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getBulkCreateAlbumLinkPostMockHandler = (overrideResponse?: DataResponseStr | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<DataResponseStr> | DataResponseStr)) => {
  return http.post('*/album-link', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getBulkCreateAlbumLinkPostResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}
export const getAlbumLinkMock = () => [
  getGetAlbumLinkGetMockHandler(),
  getBulkCreateAlbumLinkPostMockHandler()
]
