/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * 5PIX BACKEND
 * 
        Base frame with FastAPI micro framework + Postgresql
            - Login/Register with JWT
            - Permission
            - CRUD User
            - Unit testing with Pytest
            - Dockerize
        
 * OpenAPI spec version: 0.1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  AlbumLinkItemResponse,
  CreateAlbumLinkRequest,
  DataResponseAlbumLinkItemResponse,
  DataResponseStr,
  GetAlbumLinkGetParams,
  GetKeywordAlbumLinkGetKeywordGetParams,
  HTTPValidationError
} from '../../schemas'
import { defaultMutator } from '../../api/axiosInstance';



/**
 * ### API Get danh sách các link đang tồn tại theo album_id

- Chỉ Admin sử dụng
 * @summary Get
 */
export const getAlbumLinkGet = (
    params?: GetAlbumLinkGetParams,
 signal?: AbortSignal
) => {
      
      
      return defaultMutator<AlbumLinkItemResponse[]>(
      {url: `/album-link`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetAlbumLinkGetQueryKey = (params?: GetAlbumLinkGetParams,) => {
    return [`/album-link`, ...(params ? [params]: [])] as const;
    }

    
export const getGetAlbumLinkGetQueryOptions = <TData = Awaited<ReturnType<typeof getAlbumLinkGet>>, TError = HTTPValidationError>(params?: GetAlbumLinkGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAlbumLinkGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAlbumLinkGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAlbumLinkGet>>> = ({ signal }) => getAlbumLinkGet(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAlbumLinkGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetAlbumLinkGetQueryResult = NonNullable<Awaited<ReturnType<typeof getAlbumLinkGet>>>
export type GetAlbumLinkGetQueryError = HTTPValidationError


export function useGetAlbumLinkGet<TData = Awaited<ReturnType<typeof getAlbumLinkGet>>, TError = HTTPValidationError>(
 params: undefined |  GetAlbumLinkGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAlbumLinkGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAlbumLinkGet>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetAlbumLinkGet<TData = Awaited<ReturnType<typeof getAlbumLinkGet>>, TError = HTTPValidationError>(
 params?: GetAlbumLinkGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAlbumLinkGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAlbumLinkGet>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetAlbumLinkGet<TData = Awaited<ReturnType<typeof getAlbumLinkGet>>, TError = HTTPValidationError>(
 params?: GetAlbumLinkGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAlbumLinkGet>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get
 */

export function useGetAlbumLinkGet<TData = Awaited<ReturnType<typeof getAlbumLinkGet>>, TError = HTTPValidationError>(
 params?: GetAlbumLinkGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAlbumLinkGet>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetAlbumLinkGetQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * ### API tạo link theo keyword và album_id

- Chỉ Admin sử dụng
 * @summary Bulk Create
 */
export const bulkCreateAlbumLinkPost = (
    createAlbumLinkRequest: CreateAlbumLinkRequest,
 signal?: AbortSignal
) => {
      
      
      return defaultMutator<DataResponseStr>(
      {url: `/album-link`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createAlbumLinkRequest, signal
    },
      );
    }
  


export const getBulkCreateAlbumLinkPostMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof bulkCreateAlbumLinkPost>>, TError,{data: CreateAlbumLinkRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof bulkCreateAlbumLinkPost>>, TError,{data: CreateAlbumLinkRequest}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof bulkCreateAlbumLinkPost>>, {data: CreateAlbumLinkRequest}> = (props) => {
          const {data} = props ?? {};

          return  bulkCreateAlbumLinkPost(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type BulkCreateAlbumLinkPostMutationResult = NonNullable<Awaited<ReturnType<typeof bulkCreateAlbumLinkPost>>>
    export type BulkCreateAlbumLinkPostMutationBody = CreateAlbumLinkRequest
    export type BulkCreateAlbumLinkPostMutationError = HTTPValidationError

    /**
 * @summary Bulk Create
 */
export const useBulkCreateAlbumLinkPost = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof bulkCreateAlbumLinkPost>>, TError,{data: CreateAlbumLinkRequest}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof bulkCreateAlbumLinkPost>>,
        TError,
        {data: CreateAlbumLinkRequest},
        TContext
      > => {

      const mutationOptions = getBulkCreateAlbumLinkPostMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * ### API get keyword và album_id từ link
 * @summary Get Keyword
 */
export const getKeywordAlbumLinkGetKeywordGet = (
    params: GetKeywordAlbumLinkGetKeywordGetParams,
 signal?: AbortSignal
) => {
      
      
      return defaultMutator<DataResponseAlbumLinkItemResponse>(
      {url: `/album-link/get-keyword`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetKeywordAlbumLinkGetKeywordGetQueryKey = (params: GetKeywordAlbumLinkGetKeywordGetParams,) => {
    return [`/album-link/get-keyword`, ...(params ? [params]: [])] as const;
    }

    
export const getGetKeywordAlbumLinkGetKeywordGetQueryOptions = <TData = Awaited<ReturnType<typeof getKeywordAlbumLinkGetKeywordGet>>, TError = HTTPValidationError>(params: GetKeywordAlbumLinkGetKeywordGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getKeywordAlbumLinkGetKeywordGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetKeywordAlbumLinkGetKeywordGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getKeywordAlbumLinkGetKeywordGet>>> = ({ signal }) => getKeywordAlbumLinkGetKeywordGet(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getKeywordAlbumLinkGetKeywordGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetKeywordAlbumLinkGetKeywordGetQueryResult = NonNullable<Awaited<ReturnType<typeof getKeywordAlbumLinkGetKeywordGet>>>
export type GetKeywordAlbumLinkGetKeywordGetQueryError = HTTPValidationError


export function useGetKeywordAlbumLinkGetKeywordGet<TData = Awaited<ReturnType<typeof getKeywordAlbumLinkGetKeywordGet>>, TError = HTTPValidationError>(
 params: GetKeywordAlbumLinkGetKeywordGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getKeywordAlbumLinkGetKeywordGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getKeywordAlbumLinkGetKeywordGet>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetKeywordAlbumLinkGetKeywordGet<TData = Awaited<ReturnType<typeof getKeywordAlbumLinkGetKeywordGet>>, TError = HTTPValidationError>(
 params: GetKeywordAlbumLinkGetKeywordGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getKeywordAlbumLinkGetKeywordGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getKeywordAlbumLinkGetKeywordGet>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetKeywordAlbumLinkGetKeywordGet<TData = Awaited<ReturnType<typeof getKeywordAlbumLinkGetKeywordGet>>, TError = HTTPValidationError>(
 params: GetKeywordAlbumLinkGetKeywordGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getKeywordAlbumLinkGetKeywordGet>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Get Keyword
 */

export function useGetKeywordAlbumLinkGetKeywordGet<TData = Awaited<ReturnType<typeof getKeywordAlbumLinkGetKeywordGet>>, TError = HTTPValidationError>(
 params: GetKeywordAlbumLinkGetKeywordGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getKeywordAlbumLinkGetKeywordGet>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetKeywordAlbumLinkGetKeywordGetQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



