/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * 5PIX BACKEND
 * 
        Base frame with FastAPI micro framework + Postgresql
            - Login/Register with JWT
            - Permission
            - CRUD User
            - Unit testing with Pytest
            - Dockerize
        
 * OpenAPI spec version: 0.1.0
 */
import {
  useQuery
} from '@tanstack/react-query'
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import axios from 'axios'
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  HTTPValidationError,
  PageAlbumImageItemResponse,
  SearchAlbumImagesGetParams
} from '../../schemas'



/**
 * API Search Album Image
 * @summary Search
 */
export const searchAlbumImagesGet = (
    params?: SearchAlbumImagesGetParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<PageAlbumImageItemResponse>> => {
    
    return axios.get(
      `http://54.254.67.146:8000/album-images`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getSearchAlbumImagesGetQueryKey = (params?: SearchAlbumImagesGetParams,) => {
    return [`http://54.254.67.146:8000/album-images`, ...(params ? [params]: [])] as const;
    }

    
export const getSearchAlbumImagesGetQueryOptions = <TData = Awaited<ReturnType<typeof searchAlbumImagesGet>>, TError = AxiosError<HTTPValidationError>>(params?: SearchAlbumImagesGetParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof searchAlbumImagesGet>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSearchAlbumImagesGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof searchAlbumImagesGet>>> = ({ signal }) => searchAlbumImagesGet(params, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof searchAlbumImagesGet>>, TError, TData> & { queryKey: QueryKey }
}

export type SearchAlbumImagesGetQueryResult = NonNullable<Awaited<ReturnType<typeof searchAlbumImagesGet>>>
export type SearchAlbumImagesGetQueryError = AxiosError<HTTPValidationError>


/**
 * @summary Search
 */

export function useSearchAlbumImagesGet<TData = Awaited<ReturnType<typeof searchAlbumImagesGet>>, TError = AxiosError<HTTPValidationError>>(
 params?: SearchAlbumImagesGetParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof searchAlbumImagesGet>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getSearchAlbumImagesGetQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



