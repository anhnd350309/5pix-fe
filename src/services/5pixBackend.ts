/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * 5PIX BACKEND
 * 
        Base frame with FastAPI micro framework + Postgresql
            - Login/Register with JWT
            - Permission
            - CRUD User
            - Unit testing with Pytest
            - Dockerize
        
 * OpenAPI spec version: 0.1.0
 */
import axios from 'axios'
import type {
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import {
  faker
} from '@faker-js/faker'
import {
  HttpResponse,
  delay,
  http
} from 'msw'
export type SearchAlbumImagesGetParams = {
album_id?: number;
search_type?: ImageSearchType;
bib_number?: string;
page_size?: number;
page?: number;
sort_by?: string;
order?: string;
};

export type GetAlbumsGetParams = {
highlight?: boolean;
page_size?: number;
page?: number;
sort_by?: string;
order?: string;
};

export type GetUsersGetParams = {
page_size?: number;
page?: number;
sort_by?: string;
order?: string;
};

export type ValidationErrorLocItem = string | number;

export interface ValidationError {
  loc: ValidationErrorLocItem[];
  msg: string;
  type: string;
}

export interface UserUpdateMeRequest {
  email?: string;
  full_name?: string;
  password?: string;
}

/**
 * An enumeration.
 */
export type UserRole = typeof UserRole[keyof typeof UserRole];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UserRole = {
  admin: 'admin',
  guest: 'guest',
} as const;

export interface UserUpdateRequest {
  email?: string;
  full_name?: string;
  is_active?: boolean;
  password?: string;
  role?: UserRole;
}

export interface UserRegisterRequest {
  email: string;
  full_name: string;
  password: string;
  role?: UserRole;
}

export interface UserItemResponse {
  email: string;
  full_name: string;
  id: number;
  is_active: boolean;
  last_login?: string;
  role: string;
}

export interface UserCreateRequest {
  email: string;
  full_name?: string;
  is_active?: boolean;
  password: string;
  role?: UserRole;
}

export interface Token {
  access_token: string;
  token_type?: string;
}

export interface ResponseSchemaBase {
  code?: string;
  message?: string;
}

export interface MetadataSchema {
  current_page: number;
  page_size: number;
  total_items: number;
}

export interface PageUserItemResponse {
  code?: string;
  data: UserItemResponse[];
  message?: string;
  metadata: MetadataSchema;
}

export interface PageAlbumItemResponse {
  code?: string;
  data: AlbumItemResponse[];
  message?: string;
  metadata: MetadataSchema;
}

export interface PageAlbumImageItemResponse {
  code?: string;
  data: AlbumImageItemResponse[];
  message?: string;
  metadata: MetadataSchema;
}

export interface LoginRequest {
  password?: string;
  username?: string;
}

/**
 * An enumeration.
 */
export type ImageSearchType = typeof ImageSearchType[keyof typeof ImageSearchType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ImageSearchType = {
  all: 'all',
  metadata: 'metadata',
  index_face: 'index_face',
} as const;

export interface ImageCdn {
  cdn_url: string;
  url: string;
}

export interface HTTPValidationError {
  detail?: ValidationError[];
}

export interface DataResponseStr {
  code?: string;
  data?: string;
  message?: string;
}

export interface DataResponseUserItemResponse {
  code?: string;
  data?: UserItemResponse;
  message?: string;
}

export interface DataResponseToken {
  code?: string;
  data?: Token;
  message?: string;
}

export interface DataResponseImageCdn {
  code?: string;
  data?: ImageCdn;
  message?: string;
}

export interface DataResponseAlbumItemResponse {
  code?: string;
  data?: AlbumItemResponse;
  message?: string;
}

export interface BodyUploadToGetCdnBasePost {
  file: Blob;
}

export interface AlbumUpdateRequest {
  album_image_url?: string;
  album_name?: string;
  event_date?: string;
  is_highlight?: number;
}

export interface AlbumItemResponse {
  album_image_url: string;
  album_name: string;
  created_at: string;
  event_date: string;
  id: number;
  is_highlight: number;
  total_image?: number;
  updated_at: string;
}

export interface AlbumImageItemResponse {
  cdn_image_url: string;
  created_at: string;
  id: number;
  image_metadata: string;
  image_name: string;
  s3_image_url: string;
  updated_at: string;
}

export interface AlbumCreateRequest {
  album_image_url: string;
  album_name: string;
  event_date: string;
  is_highlight: number;
}





  export const get5pixBackend = () => {
/**
 * @summary Get
 */
const getHealthcheckGet = <TData = AxiosResponse<ResponseSchemaBase>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/healthcheck`,options
    );
  }

/**
 * API Upload image to S3 and return image CDN
 * @summary Upload To Get Cdn
 */
const uploadToGetCdnBasePost = <TData = AxiosResponse<DataResponseImageCdn>>(
    bodyUploadToGetCdnBasePost: BodyUploadToGetCdnBasePost, options?: AxiosRequestConfig
 ): Promise<TData> => {const formData = new FormData();
formData.append('file', bodyUploadToGetCdnBasePost.file)

    return axios.post(
      `/base`,
      formData,options
    );
  }

/**
 * @summary Login Access Token
 */
const loginAccessTokenLoginPost = <TData = AxiosResponse<DataResponseToken>>(
    loginRequest: LoginRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/login`,
      loginRequest,options
    );
  }

/**
 * @summary Register
 */
const registerRegisterPost = <TData = AxiosResponse<DataResponseUserItemResponse>>(
    userRegisterRequest: UserRegisterRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/register`,
      userRegisterRequest,options
    );
  }

/**
 * API Get list User
 * @summary Get
 */
const getUsersGet = <TData = AxiosResponse<PageUserItemResponse>>(
    params?: GetUsersGetParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/users`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * API Create User
 * @summary Create
 */
const createUsersPost = <TData = AxiosResponse<DataResponseUserItemResponse>>(
    userCreateRequest: UserCreateRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/users`,
      userCreateRequest,options
    );
  }

/**
 * API get detail current User
 * @summary Detail Me
 */
const detailMeUsersMeGet = <TData = AxiosResponse<DataResponseUserItemResponse>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/users/me`,options
    );
  }

/**
 * API Update current User
 * @summary Update Me
 */
const updateMeUsersMePut = <TData = AxiosResponse<DataResponseUserItemResponse>>(
    userUpdateMeRequest: UserUpdateMeRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/users/me`,
      userUpdateMeRequest,options
    );
  }

/**
 * API get Detail User
 * @summary Detail
 */
const detailUsersUserIdGet = <TData = AxiosResponse<DataResponseUserItemResponse>>(
    userId: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/users/${userId}`,options
    );
  }

/**
 * API update User
 * @summary Update
 */
const updateUsersUserIdPut = <TData = AxiosResponse<DataResponseUserItemResponse>>(
    userId: number,
    userUpdateRequest: UserUpdateRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/users/${userId}`,
      userUpdateRequest,options
    );
  }

/**
 * API Get list Album
 * @summary Get
 */
const getAlbumsGet = <TData = AxiosResponse<PageAlbumItemResponse>>(
    params?: GetAlbumsGetParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/albums`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * API Create Album
 * @summary Create
 */
const createAlbumsPost = <TData = AxiosResponse<DataResponseAlbumItemResponse>>(
    albumCreateRequest: AlbumCreateRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/albums`,
      albumCreateRequest,options
    );
  }

/**
 * API update Album
 * @summary Update
 */
const updateAlbumsAlbumIdPut = <TData = AxiosResponse<DataResponseAlbumItemResponse>>(
    albumId: number,
    albumUpdateRequest: AlbumUpdateRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/albums/${albumId}`,
      albumUpdateRequest,options
    );
  }

/**
 * API start process read image from file and Upload to S3
 * @summary Update
 */
const updateAlbumsAlbumIdProcessImagePut = <TData = AxiosResponse<DataResponseStr>>(
    albumId: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.put(
      `/albums/${albumId}/process-image`,undefined,options
    );
  }

/**
 * API Search Album Image
 * @summary Search
 */
const searchAlbumImagesGet = <TData = AxiosResponse<PageAlbumImageItemResponse>>(
    params?: SearchAlbumImagesGetParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/album-images`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

return {getHealthcheckGet,uploadToGetCdnBasePost,loginAccessTokenLoginPost,registerRegisterPost,getUsersGet,createUsersPost,detailMeUsersMeGet,updateMeUsersMePut,detailUsersUserIdGet,updateUsersUserIdPut,getAlbumsGet,createAlbumsPost,updateAlbumsAlbumIdPut,updateAlbumsAlbumIdProcessImagePut,searchAlbumImagesGet}};
export type GetHealthcheckGetResult = AxiosResponse<ResponseSchemaBase>
export type UploadToGetCdnBasePostResult = AxiosResponse<DataResponseImageCdn>
export type LoginAccessTokenLoginPostResult = AxiosResponse<DataResponseToken>
export type RegisterRegisterPostResult = AxiosResponse<DataResponseUserItemResponse>
export type GetUsersGetResult = AxiosResponse<PageUserItemResponse>
export type CreateUsersPostResult = AxiosResponse<DataResponseUserItemResponse>
export type DetailMeUsersMeGetResult = AxiosResponse<DataResponseUserItemResponse>
export type UpdateMeUsersMePutResult = AxiosResponse<DataResponseUserItemResponse>
export type DetailUsersUserIdGetResult = AxiosResponse<DataResponseUserItemResponse>
export type UpdateUsersUserIdPutResult = AxiosResponse<DataResponseUserItemResponse>
export type GetAlbumsGetResult = AxiosResponse<PageAlbumItemResponse>
export type CreateAlbumsPostResult = AxiosResponse<DataResponseAlbumItemResponse>
export type UpdateAlbumsAlbumIdPutResult = AxiosResponse<DataResponseAlbumItemResponse>
export type UpdateAlbumsAlbumIdProcessImagePutResult = AxiosResponse<DataResponseStr>
export type SearchAlbumImagesGetResult = AxiosResponse<PageAlbumImageItemResponse>


export const getGetHealthcheckGetResponseMock = (overrideResponse: Partial< ResponseSchemaBase > = {}): ResponseSchemaBase => ({code: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), ...overrideResponse})

export const getUploadToGetCdnBasePostResponseMock = (overrideResponse: Partial< DataResponseImageCdn > = {}): DataResponseImageCdn => ({code: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([{cdn_url: faker.string.alpha(20), url: faker.string.alpha(20)}, undefined]), message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), ...overrideResponse})

export const getLoginAccessTokenLoginPostResponseMock = (overrideResponse: Partial< DataResponseToken > = {}): DataResponseToken => ({code: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([{access_token: faker.string.alpha(20), token_type: faker.helpers.arrayElement([faker.string.alpha(20), undefined])}, undefined]), message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), ...overrideResponse})

export const getRegisterRegisterPostResponseMock = (overrideResponse: Partial< DataResponseUserItemResponse > = {}): DataResponseUserItemResponse => ({code: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([{email: faker.internet.email(), full_name: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), is_active: faker.datatype.boolean(), last_login: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), role: faker.string.alpha(20)}, undefined]), message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), ...overrideResponse})

export const getGetUsersGetResponseMock = (overrideResponse: Partial< PageUserItemResponse > = {}): PageUserItemResponse => ({code: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({email: faker.internet.email(), full_name: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), is_active: faker.datatype.boolean(), last_login: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), role: faker.string.alpha(20)})), message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), metadata: {current_page: faker.number.int({min: undefined, max: undefined}), page_size: faker.number.int({min: undefined, max: undefined}), total_items: faker.number.int({min: undefined, max: undefined})}, ...overrideResponse})

export const getCreateUsersPostResponseMock = (overrideResponse: Partial< DataResponseUserItemResponse > = {}): DataResponseUserItemResponse => ({code: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([{email: faker.internet.email(), full_name: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), is_active: faker.datatype.boolean(), last_login: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), role: faker.string.alpha(20)}, undefined]), message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), ...overrideResponse})

export const getDetailMeUsersMeGetResponseMock = (overrideResponse: Partial< DataResponseUserItemResponse > = {}): DataResponseUserItemResponse => ({code: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([{email: faker.internet.email(), full_name: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), is_active: faker.datatype.boolean(), last_login: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), role: faker.string.alpha(20)}, undefined]), message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), ...overrideResponse})

export const getUpdateMeUsersMePutResponseMock = (overrideResponse: Partial< DataResponseUserItemResponse > = {}): DataResponseUserItemResponse => ({code: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([{email: faker.internet.email(), full_name: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), is_active: faker.datatype.boolean(), last_login: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), role: faker.string.alpha(20)}, undefined]), message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), ...overrideResponse})

export const getDetailUsersUserIdGetResponseMock = (overrideResponse: Partial< DataResponseUserItemResponse > = {}): DataResponseUserItemResponse => ({code: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([{email: faker.internet.email(), full_name: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), is_active: faker.datatype.boolean(), last_login: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), role: faker.string.alpha(20)}, undefined]), message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), ...overrideResponse})

export const getUpdateUsersUserIdPutResponseMock = (overrideResponse: Partial< DataResponseUserItemResponse > = {}): DataResponseUserItemResponse => ({code: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([{email: faker.internet.email(), full_name: faker.string.alpha(20), id: faker.number.int({min: undefined, max: undefined}), is_active: faker.datatype.boolean(), last_login: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), role: faker.string.alpha(20)}, undefined]), message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), ...overrideResponse})

export const getGetAlbumsGetResponseMock = (overrideResponse: Partial< PageAlbumItemResponse > = {}): PageAlbumItemResponse => ({code: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({album_image_url: faker.string.alpha(20), album_name: faker.string.alpha(20), created_at: `${faker.date.past().toISOString().split('.')[0]}Z`, event_date: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.number.int({min: undefined, max: undefined}), is_highlight: faker.number.int({min: undefined, max: undefined}), total_image: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), updated_at: `${faker.date.past().toISOString().split('.')[0]}Z`})), message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), metadata: {current_page: faker.number.int({min: undefined, max: undefined}), page_size: faker.number.int({min: undefined, max: undefined}), total_items: faker.number.int({min: undefined, max: undefined})}, ...overrideResponse})

export const getCreateAlbumsPostResponseMock = (overrideResponse: Partial< DataResponseAlbumItemResponse > = {}): DataResponseAlbumItemResponse => ({code: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([{album_image_url: faker.string.alpha(20), album_name: faker.string.alpha(20), created_at: `${faker.date.past().toISOString().split('.')[0]}Z`, event_date: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.number.int({min: undefined, max: undefined}), is_highlight: faker.number.int({min: undefined, max: undefined}), total_image: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), updated_at: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), ...overrideResponse})

export const getUpdateAlbumsAlbumIdPutResponseMock = (overrideResponse: Partial< DataResponseAlbumItemResponse > = {}): DataResponseAlbumItemResponse => ({code: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([{album_image_url: faker.string.alpha(20), album_name: faker.string.alpha(20), created_at: `${faker.date.past().toISOString().split('.')[0]}Z`, event_date: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.number.int({min: undefined, max: undefined}), is_highlight: faker.number.int({min: undefined, max: undefined}), total_image: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), updated_at: `${faker.date.past().toISOString().split('.')[0]}Z`}, undefined]), message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), ...overrideResponse})

export const getUpdateAlbumsAlbumIdProcessImagePutResponseMock = (overrideResponse: Partial< DataResponseStr > = {}): DataResponseStr => ({code: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), ...overrideResponse})

export const getSearchAlbumImagesGetResponseMock = (overrideResponse: Partial< PageAlbumImageItemResponse > = {}): PageAlbumImageItemResponse => ({code: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), data: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({cdn_image_url: faker.string.alpha(20), created_at: `${faker.date.past().toISOString().split('.')[0]}Z`, id: faker.number.int({min: undefined, max: undefined}), image_metadata: faker.string.alpha(20), image_name: faker.string.alpha(20), s3_image_url: faker.string.alpha(20), updated_at: `${faker.date.past().toISOString().split('.')[0]}Z`})), message: faker.helpers.arrayElement([faker.string.alpha(20), undefined]), metadata: {current_page: faker.number.int({min: undefined, max: undefined}), page_size: faker.number.int({min: undefined, max: undefined}), total_items: faker.number.int({min: undefined, max: undefined})}, ...overrideResponse})


export const getGetHealthcheckGetMockHandler = (overrideResponse?: ResponseSchemaBase | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<ResponseSchemaBase> | ResponseSchemaBase)) => {
  return http.get('*/healthcheck', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetHealthcheckGetResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUploadToGetCdnBasePostMockHandler = (overrideResponse?: DataResponseImageCdn | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<DataResponseImageCdn> | DataResponseImageCdn)) => {
  return http.post('*/base', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUploadToGetCdnBasePostResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getLoginAccessTokenLoginPostMockHandler = (overrideResponse?: DataResponseToken | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<DataResponseToken> | DataResponseToken)) => {
  return http.post('*/login', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getLoginAccessTokenLoginPostResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getRegisterRegisterPostMockHandler = (overrideResponse?: DataResponseUserItemResponse | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<DataResponseUserItemResponse> | DataResponseUserItemResponse)) => {
  return http.post('*/register', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getRegisterRegisterPostResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetUsersGetMockHandler = (overrideResponse?: PageUserItemResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<PageUserItemResponse> | PageUserItemResponse)) => {
  return http.get('*/users', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetUsersGetResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getCreateUsersPostMockHandler = (overrideResponse?: DataResponseUserItemResponse | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<DataResponseUserItemResponse> | DataResponseUserItemResponse)) => {
  return http.post('*/users', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCreateUsersPostResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDetailMeUsersMeGetMockHandler = (overrideResponse?: DataResponseUserItemResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<DataResponseUserItemResponse> | DataResponseUserItemResponse)) => {
  return http.get('*/users/me', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getDetailMeUsersMeGetResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUpdateMeUsersMePutMockHandler = (overrideResponse?: DataResponseUserItemResponse | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<DataResponseUserItemResponse> | DataResponseUserItemResponse)) => {
  return http.put('*/users/me', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUpdateMeUsersMePutResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDetailUsersUserIdGetMockHandler = (overrideResponse?: DataResponseUserItemResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<DataResponseUserItemResponse> | DataResponseUserItemResponse)) => {
  return http.get('*/users/:userId', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getDetailUsersUserIdGetResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUpdateUsersUserIdPutMockHandler = (overrideResponse?: DataResponseUserItemResponse | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<DataResponseUserItemResponse> | DataResponseUserItemResponse)) => {
  return http.put('*/users/:userId', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUpdateUsersUserIdPutResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetAlbumsGetMockHandler = (overrideResponse?: PageAlbumItemResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<PageAlbumItemResponse> | PageAlbumItemResponse)) => {
  return http.get('*/albums', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetAlbumsGetResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getCreateAlbumsPostMockHandler = (overrideResponse?: DataResponseAlbumItemResponse | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<DataResponseAlbumItemResponse> | DataResponseAlbumItemResponse)) => {
  return http.post('*/albums', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCreateAlbumsPostResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUpdateAlbumsAlbumIdPutMockHandler = (overrideResponse?: DataResponseAlbumItemResponse | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<DataResponseAlbumItemResponse> | DataResponseAlbumItemResponse)) => {
  return http.put('*/albums/:albumId', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUpdateAlbumsAlbumIdPutResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getUpdateAlbumsAlbumIdProcessImagePutMockHandler = (overrideResponse?: DataResponseStr | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<DataResponseStr> | DataResponseStr)) => {
  return http.put('*/albums/:albumId/process-image', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getUpdateAlbumsAlbumIdProcessImagePutResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getSearchAlbumImagesGetMockHandler = (overrideResponse?: PageAlbumImageItemResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<PageAlbumImageItemResponse> | PageAlbumImageItemResponse)) => {
  return http.get('*/album-images', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getSearchAlbumImagesGetResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}
export const get5pixBackendMock = () => [
  getGetHealthcheckGetMockHandler(),
  getUploadToGetCdnBasePostMockHandler(),
  getLoginAccessTokenLoginPostMockHandler(),
  getRegisterRegisterPostMockHandler(),
  getGetUsersGetMockHandler(),
  getCreateUsersPostMockHandler(),
  getDetailMeUsersMeGetMockHandler(),
  getUpdateMeUsersMePutMockHandler(),
  getDetailUsersUserIdGetMockHandler(),
  getUpdateUsersUserIdPutMockHandler(),
  getGetAlbumsGetMockHandler(),
  getCreateAlbumsPostMockHandler(),
  getUpdateAlbumsAlbumIdPutMockHandler(),
  getUpdateAlbumsAlbumIdProcessImagePutMockHandler(),
  getSearchAlbumImagesGetMockHandler()]
