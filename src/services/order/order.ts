/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * 5PIX BACKEND
 * 
        Base frame with FastAPI micro framework + Postgresql
            - Login/Register with JWT
            - Permission
            - CRUD User
            - Unit testing with Pytest
            - Dockerize
        
 * OpenAPI spec version: 0.1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  AdminEditOrderOrderAdminEditPutParams,
  AdminEditOrderRequest,
  AdminPayOrderOrderAdminPayForOrderPostParams,
  CreateOrderRequest,
  CreateOrderResponse,
  HTTPValidationError,
  ListOrdersOrderListGetParams,
  MerchantListOrdersOrderMerchantListGetParams,
  PageCreateOrderResponse
} from '../../schemas'
import { defaultMutator } from '../../api/axiosInstance';



/**
 * ### Tạo order cho 1 collection
 * @summary Create Order
 */
export const createOrderOrderCreateBuyCollectionPost = (
    createOrderRequest: CreateOrderRequest,
 signal?: AbortSignal
) => {
      
      
      return defaultMutator<CreateOrderResponse>(
      {url: `/order/create/buy-collection`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createOrderRequest, signal
    },
      );
    }
  


export const getCreateOrderOrderCreateBuyCollectionPostMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createOrderOrderCreateBuyCollectionPost>>, TError,{data: CreateOrderRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof createOrderOrderCreateBuyCollectionPost>>, TError,{data: CreateOrderRequest}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createOrderOrderCreateBuyCollectionPost>>, {data: CreateOrderRequest}> = (props) => {
          const {data} = props ?? {};

          return  createOrderOrderCreateBuyCollectionPost(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateOrderOrderCreateBuyCollectionPostMutationResult = NonNullable<Awaited<ReturnType<typeof createOrderOrderCreateBuyCollectionPost>>>
    export type CreateOrderOrderCreateBuyCollectionPostMutationBody = CreateOrderRequest
    export type CreateOrderOrderCreateBuyCollectionPostMutationError = HTTPValidationError

    /**
 * @summary Create Order
 */
export const useCreateOrderOrderCreateBuyCollectionPost = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createOrderOrderCreateBuyCollectionPost>>, TError,{data: CreateOrderRequest}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof createOrderOrderCreateBuyCollectionPost>>,
        TError,
        {data: CreateOrderRequest},
        TContext
      > => {

      const mutationOptions = getCreateOrderOrderCreateBuyCollectionPostMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * ### Fetch order
 * @summary List Orders
 */
export const listOrdersOrderListGet = (
    params?: ListOrdersOrderListGetParams,
 signal?: AbortSignal
) => {
      
      
      return defaultMutator<PageCreateOrderResponse>(
      {url: `/order/list`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getListOrdersOrderListGetQueryKey = (params?: ListOrdersOrderListGetParams,) => {
    return [`/order/list`, ...(params ? [params]: [])] as const;
    }

    
export const getListOrdersOrderListGetQueryOptions = <TData = Awaited<ReturnType<typeof listOrdersOrderListGet>>, TError = HTTPValidationError>(params?: ListOrdersOrderListGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listOrdersOrderListGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getListOrdersOrderListGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof listOrdersOrderListGet>>> = ({ signal }) => listOrdersOrderListGet(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof listOrdersOrderListGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type ListOrdersOrderListGetQueryResult = NonNullable<Awaited<ReturnType<typeof listOrdersOrderListGet>>>
export type ListOrdersOrderListGetQueryError = HTTPValidationError


export function useListOrdersOrderListGet<TData = Awaited<ReturnType<typeof listOrdersOrderListGet>>, TError = HTTPValidationError>(
 params: undefined |  ListOrdersOrderListGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof listOrdersOrderListGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listOrdersOrderListGet>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useListOrdersOrderListGet<TData = Awaited<ReturnType<typeof listOrdersOrderListGet>>, TError = HTTPValidationError>(
 params?: ListOrdersOrderListGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listOrdersOrderListGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listOrdersOrderListGet>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useListOrdersOrderListGet<TData = Awaited<ReturnType<typeof listOrdersOrderListGet>>, TError = HTTPValidationError>(
 params?: ListOrdersOrderListGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listOrdersOrderListGet>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary List Orders
 */

export function useListOrdersOrderListGet<TData = Awaited<ReturnType<typeof listOrdersOrderListGet>>, TError = HTTPValidationError>(
 params?: ListOrdersOrderListGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listOrdersOrderListGet>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getListOrdersOrderListGetQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * ### Update thông tin đơn hàng , chủ yếu là sửa owner email và status
 * @summary Admin Edit Order
 */
export const adminEditOrderOrderAdminEditPut = (
    adminEditOrderRequest: AdminEditOrderRequest,
    params: AdminEditOrderOrderAdminEditPutParams,
 ) => {
      
      
      return defaultMutator<CreateOrderResponse>(
      {url: `/order/admin/edit`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: adminEditOrderRequest,
        params
    },
      );
    }
  


export const getAdminEditOrderOrderAdminEditPutMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof adminEditOrderOrderAdminEditPut>>, TError,{data: AdminEditOrderRequest;params: AdminEditOrderOrderAdminEditPutParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof adminEditOrderOrderAdminEditPut>>, TError,{data: AdminEditOrderRequest;params: AdminEditOrderOrderAdminEditPutParams}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof adminEditOrderOrderAdminEditPut>>, {data: AdminEditOrderRequest;params: AdminEditOrderOrderAdminEditPutParams}> = (props) => {
          const {data,params} = props ?? {};

          return  adminEditOrderOrderAdminEditPut(data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AdminEditOrderOrderAdminEditPutMutationResult = NonNullable<Awaited<ReturnType<typeof adminEditOrderOrderAdminEditPut>>>
    export type AdminEditOrderOrderAdminEditPutMutationBody = AdminEditOrderRequest
    export type AdminEditOrderOrderAdminEditPutMutationError = HTTPValidationError

    /**
 * @summary Admin Edit Order
 */
export const useAdminEditOrderOrderAdminEditPut = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof adminEditOrderOrderAdminEditPut>>, TError,{data: AdminEditOrderRequest;params: AdminEditOrderOrderAdminEditPutParams}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof adminEditOrderOrderAdminEditPut>>,
        TError,
        {data: AdminEditOrderRequest;params: AdminEditOrderOrderAdminEditPutParams},
        TContext
      > => {

      const mutationOptions = getAdminEditOrderOrderAdminEditPutMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * ### Admin thanh toán đơn hàng , thanh toán thủ công thay cho VNPAY
 * @summary Admin Pay Order
 */
export const adminPayOrderOrderAdminPayForOrderPost = (
    params: AdminPayOrderOrderAdminPayForOrderPostParams,
 signal?: AbortSignal
) => {
      
      
      return defaultMutator<CreateOrderResponse>(
      {url: `/order/admin/pay-for-order`, method: 'POST',
        params, signal
    },
      );
    }
  


export const getAdminPayOrderOrderAdminPayForOrderPostMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof adminPayOrderOrderAdminPayForOrderPost>>, TError,{params: AdminPayOrderOrderAdminPayForOrderPostParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof adminPayOrderOrderAdminPayForOrderPost>>, TError,{params: AdminPayOrderOrderAdminPayForOrderPostParams}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof adminPayOrderOrderAdminPayForOrderPost>>, {params: AdminPayOrderOrderAdminPayForOrderPostParams}> = (props) => {
          const {params} = props ?? {};

          return  adminPayOrderOrderAdminPayForOrderPost(params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AdminPayOrderOrderAdminPayForOrderPostMutationResult = NonNullable<Awaited<ReturnType<typeof adminPayOrderOrderAdminPayForOrderPost>>>
    
    export type AdminPayOrderOrderAdminPayForOrderPostMutationError = HTTPValidationError

    /**
 * @summary Admin Pay Order
 */
export const useAdminPayOrderOrderAdminPayForOrderPost = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof adminPayOrderOrderAdminPayForOrderPost>>, TError,{params: AdminPayOrderOrderAdminPayForOrderPostParams}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof adminPayOrderOrderAdminPayForOrderPost>>,
        TError,
        {params: AdminPayOrderOrderAdminPayForOrderPostParams},
        TContext
      > => {

      const mutationOptions = getAdminPayOrderOrderAdminPayForOrderPostMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * ### Fetch theo album.owner_id
 * @summary Merchant List Orders
 */
export const merchantListOrdersOrderMerchantListGet = (
    params?: MerchantListOrdersOrderMerchantListGetParams,
 signal?: AbortSignal
) => {
      
      
      return defaultMutator<PageCreateOrderResponse>(
      {url: `/order/merchant/list`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getMerchantListOrdersOrderMerchantListGetQueryKey = (params?: MerchantListOrdersOrderMerchantListGetParams,) => {
    return [`/order/merchant/list`, ...(params ? [params]: [])] as const;
    }

    
export const getMerchantListOrdersOrderMerchantListGetQueryOptions = <TData = Awaited<ReturnType<typeof merchantListOrdersOrderMerchantListGet>>, TError = HTTPValidationError>(params?: MerchantListOrdersOrderMerchantListGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof merchantListOrdersOrderMerchantListGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getMerchantListOrdersOrderMerchantListGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof merchantListOrdersOrderMerchantListGet>>> = ({ signal }) => merchantListOrdersOrderMerchantListGet(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof merchantListOrdersOrderMerchantListGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type MerchantListOrdersOrderMerchantListGetQueryResult = NonNullable<Awaited<ReturnType<typeof merchantListOrdersOrderMerchantListGet>>>
export type MerchantListOrdersOrderMerchantListGetQueryError = HTTPValidationError


export function useMerchantListOrdersOrderMerchantListGet<TData = Awaited<ReturnType<typeof merchantListOrdersOrderMerchantListGet>>, TError = HTTPValidationError>(
 params: undefined |  MerchantListOrdersOrderMerchantListGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof merchantListOrdersOrderMerchantListGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof merchantListOrdersOrderMerchantListGet>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useMerchantListOrdersOrderMerchantListGet<TData = Awaited<ReturnType<typeof merchantListOrdersOrderMerchantListGet>>, TError = HTTPValidationError>(
 params?: MerchantListOrdersOrderMerchantListGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof merchantListOrdersOrderMerchantListGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof merchantListOrdersOrderMerchantListGet>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useMerchantListOrdersOrderMerchantListGet<TData = Awaited<ReturnType<typeof merchantListOrdersOrderMerchantListGet>>, TError = HTTPValidationError>(
 params?: MerchantListOrdersOrderMerchantListGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof merchantListOrdersOrderMerchantListGet>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary Merchant List Orders
 */

export function useMerchantListOrdersOrderMerchantListGet<TData = Awaited<ReturnType<typeof merchantListOrdersOrderMerchantListGet>>, TError = HTTPValidationError>(
 params?: MerchantListOrdersOrderMerchantListGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof merchantListOrdersOrderMerchantListGet>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getMerchantListOrdersOrderMerchantListGetQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



