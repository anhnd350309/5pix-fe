/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * 5PIX BACKEND
 * 
        Base frame with FastAPI micro framework + Postgresql
            - Login/Register with JWT
            - Permission
            - CRUD User
            - Unit testing with Pytest
            - Dockerize
        
 * OpenAPI spec version: 0.1.0
 */
import {
  useMutation
} from '@tanstack/react-query'
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query'
import axios from 'axios'
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  BodyUploadToGetCdnBasePost,
  DataResponseImageCdn,
  HTTPValidationError
} from '../../schemas'



/**
 * API Upload image to S3 and return image CDN
 * @summary Upload To Get Cdn
 */
export const uploadToGetCdnBasePost = (
    bodyUploadToGetCdnBasePost: BodyUploadToGetCdnBasePost, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<DataResponseImageCdn>> => {const formData = new FormData();
formData.append('file', bodyUploadToGetCdnBasePost.file)

    
    return axios.post(
      `https://dapi.5pix.org/base`,
      formData,options
    );
  }



export const getUploadToGetCdnBasePostMutationOptions = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof uploadToGetCdnBasePost>>, TError,{data: BodyUploadToGetCdnBasePost}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof uploadToGetCdnBasePost>>, TError,{data: BodyUploadToGetCdnBasePost}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof uploadToGetCdnBasePost>>, {data: BodyUploadToGetCdnBasePost}> = (props) => {
          const {data} = props ?? {};

          return  uploadToGetCdnBasePost(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UploadToGetCdnBasePostMutationResult = NonNullable<Awaited<ReturnType<typeof uploadToGetCdnBasePost>>>
    export type UploadToGetCdnBasePostMutationBody = BodyUploadToGetCdnBasePost
    export type UploadToGetCdnBasePostMutationError = AxiosError<HTTPValidationError>

    /**
 * @summary Upload To Get Cdn
 */
export const useUploadToGetCdnBasePost = <TError = AxiosError<HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof uploadToGetCdnBasePost>>, TError,{data: BodyUploadToGetCdnBasePost}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof uploadToGetCdnBasePost>>,
        TError,
        {data: BodyUploadToGetCdnBasePost},
        TContext
      > => {

      const mutationOptions = getUploadToGetCdnBasePostMutationOptions(options);

      return useMutation(mutationOptions);
    }
    